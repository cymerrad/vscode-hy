information_for_contributors:
- This file has been converted from https://github.com/atom/language-hy/blob/master/grammars/hy.cson
- If you want to provide a fix or improvement, please create a pull request against
  the original repository.
- Once accepted there, we are happy to receive an update request.
name: Hy
patterns:
- include: '#comment'
- include: '#shebang-comment'
- include: '#quoted-sexp'
- include: '#sexp'
- include: '#keyfn'
- include: '#string'
- include: '#vector'
- include: '#set'
- include: '#map'
# - include: '#regexp'
- include: '#var'
- include: '#constants'
- include: '#dynamic-variables'
- include: '#metadata'
- include: '#namespace-symbol'
- include: '#symbol'
repository:
  comment:
    begin: (?<!\\);
    beginCaptures:
      '0':
        name: punctuation.definition.comment.hy
    end: $
    name: comment.line.semicolon.hy
  constants:
    patterns:
    - match: (None)(?=(\s|\)|\]|\}))
      name: constant.language.nil.hy
    - match: (True|False)
      name: constant.language.boolean.hy
    - match: (-?\d+/\d+)
      name: constant.numeric.ratio.hy
    - match: (-?\d+[rR]\w+)
      name: constant.numeric.arbitrary-radix.hy
    - match: (-?0x[0-9a-fA-F]+)
      name: constant.numeric.hexadecimal.hy
    - match: (-?0o[0-7]+)
      name: constant.numeric.octal.hy
    # - match: (-?\d+\.\d+([eE][+-]?\d+)?M)
    #   name: constant.numeric.bigdecimal.hy
    - match: (-?\d+\.\d+([eE][+-]?\d+)?)
      name: constant.numeric.double.hy
    # - match: (-?\d+N)
    #   name: constant.numeric.bigint.hy
    - match: (-?\d+)
      name: constant.numeric.long.hy
    - include: '#keyword'
  dynamic-variables:
    match: \*[\w\.\-\_\:\+\=\>\<\!\?\d]+\*
    name: meta.symbol.dynamic.hy
  keyfn:
    patterns:
    # - match: (?<=(\s|\(|\[|\{))(if(-[-\p{Ll}\?]*)?|when(-[-\p{Ll}]*)?|for(-[-\p{Ll}]*)?|cond|do|let(-[-\p{Ll}\?]*)?|binding|loop|recur|fn|throw[\p{Ll}\-]*|try|catch|finally|([\p{Ll}]*case))(?=(\s|\)|\]|\}))
    #   name: storage.control.hy
    - match: |
        (?x)
        (?<=(\s|\(|\[|\{))
        (
          \.|->|->>|and|as->|assert|assoc|break|comment|cond|
          dfor|continue|do|doc|#doc|
          defmacro|defmacro/g!|defmacro!|
          deftag|del|doto|eval-and-compile|eval-when-compile|
          first|for|gensym|get|gfor|if|if\*|if-not|
          lif|lif-not|import|last|lfor|
          not|or|print|quasiquote|quote|require|
          rest|return|sfor|cut|raise|try|unless|
          unpack-iterable|unpack-mapping|unquote|
          unquote-splice|when|while|with|with/a|
          with-decorator|#@|with-gensyms|xor|yield|yield-from
        )
        (?=(\s|\)|\]|\}))
      name: keyword.control.hy
    - match: |
        (?x)
        (?<=(\s|\(|\[|\{))
        (
          setv|defmain|defn|defn/a|fn|fn/a|defclass|nonlocal|global
        )
        (?=(\s|\)|\]|\}))
      name: storage.control.hy
  keyword:
    match: (?<=(\s|\(|\[|\{)):[\w\#\.\-\_\:\+\=\>\<\/\!\?\*]+(?=(\s|\)|\]|\}|\,))
    name: constant.keyword.hy
  map:
    begin: (\{)
    beginCaptures:
      '1':
        name: punctuation.section.map.begin.hy
    end: (\}(?=[\}\]\)\s]*(?:;|$)))|(\})
    endCaptures:
      '1':
        name: punctuation.section.map.end.trailing.hy
      '2':
        name: punctuation.section.map.end.hy
    name: meta.map.hy
    patterns:
    - include: $self
  metadata:
    patterns:
    - begin: (\^\{)
      beginCaptures:
        '1':
          name: punctuation.section.metadata.map.begin.hy
      end: (\}(?=[\}\]\)\s]*(?:;|$)))|(\})
      endCaptures:
        '1':
          name: punctuation.section.metadata.map.end.trailing.hy
        '2':
          name: punctuation.section.metadata.map.end.hy
      name: meta.metadata.map.hy
      patterns:
      - include: $self
    - begin: (\^)
      end: (\s)
      name: meta.metadata.simple.hy
      patterns:
      - include: '#keyword'
      - include: $self
  namespace-symbol:
    patterns:
    - captures:
        '1':
          name: meta.symbol.namespace.hy
      match: ([\p{L}\.\-\_\+\=\>\<\!\?\*][\w\.\-\_\:\+\=\>\<\!\?\*\d]*)/
  quoted-sexp:
    begin: (['``]\()
    beginCaptures:
      '1':
        name: punctuation.section.expression.begin.hy
    end: (\))$|(\)(?=[\}\]\)\s]*(?:;|$)))|(\))
    endCaptures:
      '1':
        name: punctuation.section.expression.end.trailing.hy
      '2':
        name: punctuation.section.expression.end.trailing.hy
      '3':
        name: punctuation.section.expression.end.hy
    name: meta.quoted-expression.hy
    patterns:
    - include: $self
  set:
    begin: (\#\{)
    beginCaptures:
      '1':
        name: punctuation.section.set.begin.hy
    end: (\}(?=[\}\]\)\s]*(?:;|$)))|(\})
    endCaptures:
      '1':
        name: punctuation.section.set.end.trailing.hy
      '2':
        name: punctuation.section.set.end.hy
    name: meta.set.hy
    patterns:
    - include: $self
  sexp:
    begin: (\()
    beginCaptures:
      '1':
        name: punctuation.section.expression.begin.hy
    end: (\))$|(\)(?=[\}\]\)\s]*(?:;|$)))|(\))
    endCaptures:
      '1':
        name: punctuation.section.expression.end.trailing.hy
      '2':
        name: punctuation.section.expression.end.trailing.hy
      '3':
        name: punctuation.section.expression.end.hy
    name: meta.expression.hy
    patterns:
    - begin: |
        (?x)
        (?<=\()
        (defmain|defn|defn/a|fn|fn/a|defclass)\s+
      beginCaptures:
        '1':
          name: storage.control.hy
      end: (?=\))
      name: meta.definition.global.hy
      patterns:
      - include: '#metadata'
      - include: '#dynamic-variables'
      - match: ([\p{L}\.\-\_\+\=\>\<\!\?\*][\w\.\-\_\:\+\=\>\<\!\?\*\d]*)
        name: entity.global.hy
      - include: $self
    - include: '#keyfn'
    - include: '#constants'
    - include: '#vector'
    - include: '#map'
    - include: '#set'
    - include: '#sexp'
    - captures:
        '1':
          name: entity.name.function.hy
      match: (?<=\()(.+?)(?=\s|\))
      patterns:
      - include: $self
    - include: $self
  shebang-comment:
    begin: ^(#!)
    beginCaptures:
      '1':
        name: punctuation.definition.comment.shebang.hy
    end: $
    name: comment.line.shebang.hy
  string:
    begin: (?<!\\)(")
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.hy
    end: (")
    endCaptures:
      '1':
        name: punctuation.definition.string.end.hy
    name: string.quoted.double.hy
    patterns:
    - match: \\.
      name: constant.character.escape.hy
  symbol:
    patterns:
    - match: ([\p{L}\.\-\_\+\=\>\<\!\?\*][\w\.\-\_\:\+\=\>\<\!\?\*\d]*)
      name: meta.symbol.hy
  var:
    match: (?<=(\s|\(|\[|\{)\#)'[\w\.\-\_\:\+\=\>\<\/\!\?\*]+(?=(\s|\)|\]|\}))
    name: meta.var.hy
  vector:
    begin: (\[)
    beginCaptures:
      '1':
        name: punctuation.section.vector.begin.hy
    end: (\](?=[\}\]\)\s]*(?:;|$)))|(\])
    endCaptures:
      '1':
        name: punctuation.section.vector.end.trailing.hy
      '2':
        name: punctuation.section.vector.end.hy
    name: meta.vector.hy
    patterns:
    - include: $self
scopeName: source.hy

