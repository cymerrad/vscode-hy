name: Hy
patterns:
  - include: "#comment"
  - include: "#shebang-comment"
  - include: "#quoted-sexp"
  - include: "#sexp"
  - include: "#keyfn"
  - include: "#string"
  - include: "#vector"
  - include: "#set"
  - include: "#map"
  # - include: '#regexp'
  - include: "#var"
  - include: "#constants"
  # - include: '#metadata'
  - include: "#symbol"
repository:
  args:
    begin: (\[)
    beginCaptures:
      "1":
        name: punctuation.definition.parameters.begin.hylang
    end: (\](?=[\}\]\)\s]*(?:;|$)))|(\])
    endCaptures:
      "1":
        name: punctuation.definition.parameters.end.hylang
    name: meta.function.parameters.python
    patterns:
      - match: \s*(\w+)\s*,?\s*
        name: variable.parameter.function.language.python
  comment:
    begin: (?<!\\);
    beginCaptures:
      "0":
        name: punctuation.definition.comment.hylang
    end: $
    name: comment.line.semicolon.hylang
  constants:
    patterns:
      - match: (None)(?=(\s|\)|\]|\}))
        name: constant.language.python
      - match: (True|False)
        name: constant.language.python
      - match: (-?\d+/\d+)
        name: constant.numeric.ratio.hylang

      - match: (-?0x[0-9a-fA-F]+)
        name: constant.numeric.hex.python
      - match: (-?0o[0-7]+)
        name: constant.numeric.oct.python
      - match: (-?\d+\.\d+([eE][+-]?\d+)?)
        name: constant.numeric.float.python
      - match: (-?\d+)
        name: constant.numeric.dec.python
  keyfn:
    patterns:
      - match: "(?<=(\\s|\\(|\\[|\\{))\
          (->|->>|and|as->|assert|assoc|break|comment|cond|\
          dfor|continue|do|defmacro/g!|defmacro!|defmacro|\
          deftag|del|doto|for|gfor|if|if\\*|if-not|\
          lif|lif-not|import|lfor|not|or|require|\
          rest|return|sfor|raise|try|unless|\
          when|while|with|with/a|with-decorator|#@|with-gensyms|xor|yield|yield-from)\
          (?=(\\s|\\)|\\]|\\}))"
        name: keyword.control.python
      - match: "(?<=(\\s|\\(|\\[|\\{))\
          (setv|get|nonlocal|global|defmain|defn/a|defn|fn/a|fn|defclass)\
          (?=(\\s|\\)|\\]|\\}))"
        name: storage.control.python
      - match: "(?<=(\\s|\\(|\\[|\\{))\
          (eval-and-compile|eval-when-compile|comment|quasiquote|quote|unquote|\
          unpack-iterable|unpack-mapping|doc|#doc|last|first|cut|unquote-splice|\
          print|gensym|comp|,)\
          (?=(\\s|\\)|\\]|\\}))"
        name: support.function.builtin.python
  keyword:
    match: (?<=(\s|\(|\[|\{)):[\w\#\.\-\_\:\+\=\>\<\/\!\?\*]+(?=(\s|\)|\]|\}|\,))
    name: constant.keyword.hylang
  map:
    begin: (\{)
    beginCaptures:
      "1":
        name: punctuation.section.map.begin.hylang
    end: (\}(?=[\}\]\)\s]*(?:;|$)))|(\})
    endCaptures:
      "1":
        name: punctuation.section.map.end.trailing.hylang
      "2":
        name: punctuation.section.map.end.hylang
    name: meta.map.python
    patterns:
      - include: $self
  # metadata:
  #   patterns:
  #   - begin: (\^\{)
  #     beginCaptures:
  #       '1':
  #         name: punctuation.section.metadata.map.begin.hylang
  #     end: (\}(?=[\}\]\)\s]*(?:;|$)))|(\})
  #     endCaptures:
  #       '1':
  #         name: punctuation.section.metadata.map.end.trailing.hylang
  #       '2':
  #         name: punctuation.section.metadata.map.end.hylang
  #     name: meta.metadata.map.hylang
  #     patterns:
  #     - include: $self
  #   - begin: (\^)
  #     end: (\s)
  #     name: meta.metadata.simple.hylang
  #     patterns:
  #     - include: '#keyword'
  #     - include: $self
  quoted-sexp:
    begin: (['`]\()
    beginCaptures:
      "1":
        name: punctuation.section.expression.begin.hylang
    end: (\))$|(\)(?=[\}\]\)\s]*(?:;|$)))|(\))
    endCaptures:
      "1":
        name: punctuation.section.expression.end.trailing.hylang
      "2":
        name: punctuation.section.expression.end.trailing.hylang
      "3":
        name: punctuation.section.expression.end.hylang
    name: meta.quoted-expression.python
    patterns:
      - include: $self
  set:
    begin: (\#\{)
    beginCaptures:
      "1":
        name: punctuation.section.set.begin.hylang
    end: (\}(?=[\}\]\)\s]*(?:;|$)))|(\})
    endCaptures:
      "1":
        name: punctuation.section.set.end.trailing.hylang
      "2":
        name: punctuation.section.set.end.hylang
    name: meta.set.python
    patterns:
      - include: $self
  sexp:
    begin: (\()
    beginCaptures:
      "1":
        name: punctuation.section.expression.begin.hylang
    end: (\))$|(\)(?=[\}\]\)\s]*(?:;|$)))|(\))
    endCaptures:
      "1":
        name: punctuation.section.expression.end.trailing.hylang
      "2":
        name: punctuation.section.expression.end.trailing.hylang
      "3":
        name: punctuation.section.expression.end.hylang
    name: meta.expression.python
    patterns:
      - begin: (?<=\()(defmain|defn/a|defn|fn/a|fn|defclass)\s+
        beginCaptures:
          '1':
            name: storage.control.python
        end: (?=\))
        name: meta.definition.function.hy
        patterns:
        # - include: '#metadata'
        - match: ([\w\.\-\_\+\=\>\<\!\?\*][\w\.\-\_\:\+\=\>\<\!\?\*\d]*)
          name: entity.name.function.python
        - include: "#args"
        - include: $self
      - begin: (?<=\()(import|require|defmacro/g!|defmacro!|defmacro|deftag)\s+
        beginCaptures:
          '1':
            name: keyword.control.python
        end: (?=\))
        name: meta.definition.global.hylang
        patterns:
        # - include: '#metadata'
        - match: ([\w\.\-\_\+\=\>\<\!\?\*][\w\.\-\_\:\+\=\>\<\!\?\*\d]*)
          name: entity.global.hylang
        - include: $self
      - include: "#keyfn"
      - include: "#constants"
      - include: "#vector"
      - include: "#map"
      - include: "#set"
      - include: "#sexp"
      - captures:
          "1":
            name: entity.name.function.python
        match: (?<=\()(.+?)(?=\s|\))
        patterns:
          - include: $self
      - include: $self
  shebang-comment:
    begin: ^(#!)
    beginCaptures:
      "1":
        name: punctuation.definition.comment.shebang.hylang
    end: $
    name: comment.line.shebang.python
  string:
    begin: (?<!\\)(")
    beginCaptures:
      "1":
        name: punctuation.definition.string.begin.hylang
    end: (")
    endCaptures:
      "1":
        name: punctuation.definition.string.end.hylang
    name: string.quoted.double.python
    patterns:
      - match: \\.
        name: constant.character.escape.python
  symbol:
    patterns:
      - match: ([\w\.\-\_\+\=\>\<\!\?\*][\w\.\-\_\:\+\=\>\<\!\?\*\d]*)
        name: meta.symbol.hylang
  var:
    match: (?<=(\s|\(|\[|\{)\#)'[\w\.\-\_\:\+\=\>\<\/\!\?\*]+(?=(\s|\)|\]|\}))
    name: meta.var.python
  vector:
    begin: (\[)
    beginCaptures:
      "1":
        name: punctuation.section.vector.begin.hylang
    end: (\](?=[\}\]\)\s]*(?:;|$)))|(\])
    endCaptures:
      "1":
        name: punctuation.section.vector.end.trailing.hylang
      "2":
        name: punctuation.section.vector.end.hylang
    name: meta.vector.python
    patterns:
      - include: $self
scopeName: source.hy
